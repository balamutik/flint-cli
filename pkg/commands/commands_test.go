package commands

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"flint-vault/pkg/lib/vault"

	"github.com/urfave/cli/v3"
)

// TestHelper - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
type TestHelper struct {
	tmpDir     string
	vaultPath  string
	password   string
	extractDir string
}

func NewTestHelper(t *testing.T) *TestHelper {
	tmpDir, err := os.MkdirTemp("", "cmd_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}

	return &TestHelper{
		tmpDir:     tmpDir,
		vaultPath:  filepath.Join(tmpDir, "test.dat"),
		password:   "TestPassword123!",
		extractDir: filepath.Join(tmpDir, "extracted"),
	}
}

func (h *TestHelper) Cleanup() {
	os.RemoveAll(h.tmpDir)
}

func (h *TestHelper) CreateTestFiles(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
	testDir := filepath.Join(h.tmpDir, "test_files")
	subDir := filepath.Join(testDir, "subdir")

	err := os.MkdirAll(subDir, 0755)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
	files := map[string]string{
		filepath.Join(testDir, "file1.txt"):        "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 1 üöÄ",
		filepath.Join(testDir, "file2.txt"):        "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 2 üìÅ",
		filepath.Join(subDir, "nested_file.txt"):   "–§–∞–π–ª –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–µ üìÇ",
		filepath.Join(h.tmpDir, "single_file.txt"): "–û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª",
	}

	for path, content := range files {
		err := os.WriteFile(path, []byte(content), 0644)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª %s: %v", path, err)
		}
	}
}

func TestCreateCommand(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	app := &cli.Command{
		Name: "test-create",
		Commands: []*cli.Command{
			{
				Name: "create",
				Flags: []cli.Flag{
					&cli.StringFlag{Name: "file", Aliases: []string{"f"}},
					&cli.StringFlag{Name: "password", Aliases: []string{"p"}},
				},
				Action: func(ctx context.Context, cmd *cli.Command) error {
					file := cmd.String("file")
					password := cmd.String("password")
					return vault.CreateVault(file, password)
				},
			},
		},
	}

	testCases := []struct {
		name        string
		args        []string
		expectError bool
		errorMsg    string
	}{
		{
			name:        "–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ",
			args:        []string{"test-create", "create", "-f", helper.vaultPath, "-p", helper.password},
			expectError: false,
		},
		{
			name:        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª",
			args:        []string{"test-create", "create", "-p", helper.password},
			expectError: true,
		},
		{
			name:        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–æ–ª—å",
			args:        []string{"test-create", "create", "-f", helper.vaultPath + "_no_pass"},
			expectError: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			err := app.Run(context.Background(), tc.args)

			if tc.expectError && err == nil {
				t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ nil")
			}

			if !tc.expectError && err != nil {
				t.Errorf("–ù–µ –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –ø–æ–ª—É—á–∏–ª–∏: %v", err)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
			if !tc.expectError && err == nil {
				if _, err := os.Stat(helper.vaultPath); os.IsNotExist(err) {
					t.Errorf("–§–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
				}
			}
		})
	}
}

func TestAddCommand(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()
	helper.CreateTestFiles(t)

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	testCases := []struct {
		name       string
		sourcePath string
		expectErr  bool
	}{
		{
			name:       "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
			sourcePath: filepath.Join(helper.tmpDir, "single_file.txt"),
			expectErr:  false,
		},
		{
			name:       "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞",
			sourcePath: filepath.Join(helper.tmpDir, "test_files"),
			expectErr:  false,
		},
		{
			name:       "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞",
			sourcePath: filepath.Join(helper.tmpDir, "nonexistent.txt"),
			expectErr:  true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			var err error

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)
			if !tc.expectErr {
				if _, statErr := os.Stat(tc.sourcePath); statErr != nil {
					t.Fatalf("–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", tc.sourcePath)
				}
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ñ–∞–π–ª —ç—Ç–æ –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥
			if info, statErr := os.Stat(tc.sourcePath); statErr == nil && info.IsDir() {
				err = vault.AddDirectoryToVault(helper.vaultPath, helper.password, tc.sourcePath)
			} else if statErr == nil {
				err = vault.AddFileToVault(helper.vaultPath, helper.password, tc.sourcePath)
			} else {
				err = statErr // –û—à–∏–±–∫–∞ stat
			}

			if tc.expectErr && err == nil {
				t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ nil")
			}

			if !tc.expectErr && err != nil {
				t.Errorf("–ù–µ –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –ø–æ–ª—É—á–∏–ª–∏: %v", err)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
			if !tc.expectErr && err == nil {
				data, err := vault.ListVault(helper.vaultPath, helper.password)
				if err != nil {
					t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
				}

				if len(data.Entries) == 0 {
					t.Errorf("–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ")
				}
			}
		})
	}
}

func TestListCommand(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
	testFile := filepath.Join(helper.tmpDir, "test.txt")
	err = os.WriteFile(testFile, []byte("test content"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É list
	data, err := vault.ListVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: %v", err)
	}

	if len(data.Entries) != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 –∑–∞–ø–∏—Å—å, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	entry := data.Entries[0]
	if entry.Name != "test.txt" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 'test.txt', –ø–æ–ª—É—á–∏–ª–∏ '%s'", entry.Name)
	}

	if string(entry.Content) != "test content" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
	}
}

func TestExtractCommand(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
	testFile1 := filepath.Join(helper.tmpDir, "test1.txt")
	testFile2 := filepath.Join(helper.tmpDir, "test2.txt")

	err = os.WriteFile(testFile1, []byte("content1"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = os.WriteFile(testFile2, []byte("content2"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile1)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile2)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
	err = vault.ExtractVault(helper.vaultPath, helper.password, helper.extractDir)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª—ã: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫–∞–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
	extractedFile1 := filepath.Join(helper.extractDir, testFile1)
	extractedFile2 := filepath.Join(helper.extractDir, testFile2)

	content1, err := os.ReadFile(extractedFile1)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª 1: %v", err)
	}

	if string(content1) != "content1" {
		t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 1 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
	}

	content2, err := os.ReadFile(extractedFile2)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª 2: %v", err)
	}

	if string(content2) != "content2" {
		t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 2 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
	}
}

func TestGetCommand(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
	testFile := filepath.Join(helper.tmpDir, "specific_file.txt")
	err = os.WriteFile(testFile, []byte("specific content"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
	getExtractDir := filepath.Join(helper.tmpDir, "get_extract")
	err = vault.ExtractSpecific(helper.vaultPath, helper.password, testFile, getExtractDir)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	extractedFile := filepath.Join(getExtractDir, "specific_file.txt")
	content, err := os.ReadFile(extractedFile)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}

	if string(content) != "specific content" {
		t.Errorf("Content mismatch: expected 'specific content', got '%s'", string(content))
	}
}

func TestGetCommandMultiple(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// Create vault with test data
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("Failed to create vault: %v", err)
	}

	// Add multiple test files
	testFile1 := filepath.Join(helper.tmpDir, "file1.txt")
	testFile2 := filepath.Join(helper.tmpDir, "file2.txt")
	testDir := filepath.Join(helper.tmpDir, "test_dir")
	testFileInDir := filepath.Join(testDir, "file_in_dir.txt")

	// Create test structure
	err = os.MkdirAll(testDir, 0755)
	if err != nil {
		t.Fatalf("Failed to create test directory: %v", err)
	}

	err = os.WriteFile(testFile1, []byte("content1"), 0644)
	if err != nil {
		t.Fatalf("Failed to create test file1: %v", err)
	}

	err = os.WriteFile(testFile2, []byte("content2"), 0644)
	if err != nil {
		t.Fatalf("Failed to create test file2: %v", err)
	}

	err = os.WriteFile(testFileInDir, []byte("dir content"), 0644)
	if err != nil {
		t.Fatalf("Failed to create test file in dir: %v", err)
	}

	// Add files to vault
	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile1)
	if err != nil {
		t.Fatalf("Failed to add file1 to vault: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile2)
	if err != nil {
		t.Fatalf("Failed to add file2 to vault: %v", err)
	}

	err = vault.AddDirectoryToVault(helper.vaultPath, helper.password, testDir)
	if err != nil {
		t.Fatalf("Failed to add directory to vault: %v", err)
	}

	t.Run("ExtractMultipleFiles", func(t *testing.T) {
		multiExtractDir := filepath.Join(helper.tmpDir, "multi_extract")

		// Test extracting multiple files (use full paths as stored in vault)
		extractedPaths, notFoundPaths, err := vault.ExtractMultiple(
			helper.vaultPath,
			helper.password,
			[]string{testFile1, testFile2},
			multiExtractDir,
		)
		if err != nil {
			t.Fatalf("Failed to extract multiple files: %v", err)
		}

		// Check results
		if len(extractedPaths) != 2 {
			t.Errorf("Expected 2 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 0 {
			t.Errorf("Expected 0 not found paths, got %d", len(notFoundPaths))
		}

		// Check extracted files
		extractedFile1 := filepath.Join(multiExtractDir, "file1.txt")
		content1, err := os.ReadFile(extractedFile1)
		if err != nil {
			t.Fatalf("Failed to read extracted file1: %v", err)
		}
		if string(content1) != "content1" {
			t.Errorf("File1 content mismatch: expected 'content1', got '%s'", string(content1))
		}

		extractedFile2 := filepath.Join(multiExtractDir, "file2.txt")
		content2, err := os.ReadFile(extractedFile2)
		if err != nil {
			t.Fatalf("Failed to read extracted file2: %v", err)
		}
		if string(content2) != "content2" {
			t.Errorf("File2 content mismatch: expected 'content2', got '%s'", string(content2))
		}
	})

	t.Run("ExtractMixedFilesAndDirs", func(t *testing.T) {
		mixedExtractDir := filepath.Join(helper.tmpDir, "mixed_extract")

		// Test extracting mixed files and directories (use full paths as stored in vault)
		extractedPaths, notFoundPaths, err := vault.ExtractMultiple(
			helper.vaultPath,
			helper.password,
			[]string{testFile1, testDir},
			mixedExtractDir,
		)
		if err != nil {
			t.Fatalf("Failed to extract mixed targets: %v", err)
		}

		// Check results
		if len(extractedPaths) != 2 {
			t.Errorf("Expected 2 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 0 {
			t.Errorf("Expected 0 not found paths, got %d", len(notFoundPaths))
		}

		// Check individual file
		extractedFile := filepath.Join(mixedExtractDir, "file1.txt")
		if _, err := os.Stat(extractedFile); os.IsNotExist(err) {
			t.Errorf("file1.txt was not extracted")
		}

		// Check directory content (relative to testDir base)
		dirFile := filepath.Join(mixedExtractDir, "file_in_dir.txt")
		content, err := os.ReadFile(dirFile)
		if err != nil {
			t.Fatalf("Failed to read file from extracted directory: %v", err)
		}
		if string(content) != "dir content" {
			t.Errorf("Directory file content mismatch: expected 'dir content', got '%s'", string(content))
		}
	})

	t.Run("ExtractWithNotFound", func(t *testing.T) {
		notFoundExtractDir := filepath.Join(helper.tmpDir, "not_found_extract")

		// Test extracting with some non-existent files
		extractedPaths, notFoundPaths, err := vault.ExtractMultiple(
			helper.vaultPath,
			helper.password,
			[]string{testFile1, "nonexistent.txt", testFile2},
			notFoundExtractDir,
		)
		if err != nil {
			t.Fatalf("Failed to extract with not found targets: %v", err)
		}

		// Check results
		if len(extractedPaths) != 2 {
			t.Errorf("Expected 2 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 1 {
			t.Errorf("Expected 1 not found path, got %d", len(notFoundPaths))
		}

		// Check that existing files were extracted
		extractedFile1 := filepath.Join(notFoundExtractDir, "file1.txt")
		if _, err := os.Stat(extractedFile1); os.IsNotExist(err) {
			t.Errorf("file1.txt was not extracted")
		}

		extractedFile2 := filepath.Join(notFoundExtractDir, "file2.txt")
		if _, err := os.Stat(extractedFile2); os.IsNotExist(err) {
			t.Errorf("file2.txt was not extracted")
		}
	})
}

func TestRemoveCommand(t *testing.T) {
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
	testFile1 := filepath.Join(helper.tmpDir, "remove1.txt")
	testFile2 := filepath.Join(helper.tmpDir, "remove2.txt")

	err = os.WriteFile(testFile1, []byte("remove content 1"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = os.WriteFile(testFile2, []byte("remove content 2"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile1)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	err = vault.AddFileToVault(helper.vaultPath, helper.password, testFile2)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ 2 —Ñ–∞–π–ª–∞
	data, err := vault.ListVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: %v", err)
	}

	if len(data.Entries) != 2 {
		t.Fatalf("–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Ñ–∞–π–ª–∞, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	// –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
	err = vault.RemoveFromVault(helper.vaultPath, helper.password, testFile1)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—Å—è 1 —Ñ–∞–π–ª
	data, err = vault.ListVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
	}

	if len(data.Entries) != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è 1 —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
	if data.Entries[0].Path != testFile2 {
		t.Errorf("–û—Å—Ç–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª: %s", data.Entries[0].Path)
	}
}

func TestFormatSize(t *testing.T) {
	testCases := []struct {
		size     int64
		expected string
	}{
		{0, "0 –ë"},
		{512, "512 –ë"},
		{1024, "1.0 K–ë"},
		{1536, "1.5 K–ë"},
		{1048576, "1.0 M–ë"},
		{1073741824, "1.0 G–ë"},
		{1099511627776, "1.0 T–ë"},
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprintf("Size_%d", tc.size), func(t *testing.T) {
			result := formatSize(tc.size)
			if result != tc.expected {
				t.Errorf("formatSize(%d) = %s, –æ–∂–∏–¥–∞–ª–æ—Å—å %s", tc.size, result, tc.expected)
			}
		})
	}
}

func TestPasswordSecurity(t *testing.T) {
	// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–∞—Ä–æ–ª–∏ –Ω–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏
	helper := NewTestHelper(t)
	defer helper.Cleanup()

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
	_, err = vault.ListVault(helper.vaultPath, "WrongPassword")
	if err == nil {
		t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if !strings.Contains(err.Error(), "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å") {
		t.Errorf("–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ: %v", err)
	}
}

func TestFullWorkflow(t *testing.T) {
	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
	helper := NewTestHelper(t)
	defer helper.Cleanup()
	helper.CreateTestFiles(t)

	// 1. –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err := vault.CreateVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–®–∞–≥ 1 - –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// 2. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
	singleFile := filepath.Join(helper.tmpDir, "single_file.txt")
	err = vault.AddFileToVault(helper.vaultPath, helper.password, singleFile)
	if err != nil {
		t.Fatalf("–®–∞–≥ 2 - –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	// 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å —Ñ–∞–π–ª–∞–º–∏
	testDir := filepath.Join(helper.tmpDir, "test_files")
	err = vault.AddDirectoryToVault(helper.vaultPath, helper.password, testDir)
	if err != nil {
		t.Fatalf("–®–∞–≥ 3 - –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}

	// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	data, err := vault.ListVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–®–∞–≥ 4 - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: %v", err)
	}

	if len(data.Entries) < 4 { // –ú–∏–Ω–∏–º—É–º: single_file + test_files + 2 —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏
		t.Errorf("–®–∞–≥ 4 - –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 4 –∑–∞–ø–∏—Å–∏, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	// 5. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
	specificExtractDir := filepath.Join(helper.tmpDir, "specific_extract")
	err = vault.ExtractSpecific(helper.vaultPath, helper.password, singleFile, specificExtractDir)
	if err != nil {
		t.Fatalf("–®–∞–≥ 5 - –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	extractedSpecific := filepath.Join(specificExtractDir, "single_file.txt")
	if _, err := os.Stat(extractedSpecific); os.IsNotExist(err) {
		t.Errorf("–®–∞–≥ 5 - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω")
	}

	// 6. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
	err = vault.ExtractVault(helper.vaultPath, helper.password, helper.extractDir)
	if err != nil {
		t.Fatalf("–®–∞–≥ 6 - –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ —Ñ–∞–π–ª—ã: %v", err)
	}

	// 7. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
	err = vault.RemoveFromVault(helper.vaultPath, helper.password, singleFile)
	if err != nil {
		t.Fatalf("–®–∞–≥ 7 - –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	// 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
	dataAfterRemove, err := vault.ListVault(helper.vaultPath, helper.password)
	if err != nil {
		t.Fatalf("–®–∞–≥ 8 - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
	}

	if len(dataAfterRemove.Entries) >= len(data.Entries) {
		t.Errorf("–®–∞–≥ 8 - –§–∞–π–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω (–±—ã–ª–æ %d, —Å—Ç–∞–ª–æ %d)", len(data.Entries), len(dataAfterRemove.Entries))
	}

	t.Logf("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}
