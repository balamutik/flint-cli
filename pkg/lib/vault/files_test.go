package vault

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"
	"time"
)

func TestAddFileToVault(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err = CreateVault(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
	testFilePath := filepath.Join(tmpDir, "test_file.txt")
	testContent := "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º! üöÄ"
	err = os.WriteFile(testFilePath, []byte(testContent), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err = AddFileToVault(vaultPath, password, testFilePath)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
	data, err := loadVaultData(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	if len(data.Entries) != 1 {
		t.Fatalf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 –∑–∞–ø–∏—Å—å, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	entry := data.Entries[0]
	if entry.Path != testFilePath {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è %s, –ø–æ–ª—É—á–∏–ª–∏ %s", testFilePath, entry.Path)
	}

	if entry.Name != "test_file.txt" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 'test_file.txt', –ø–æ–ª—É—á–∏–ª–∏ '%s'", entry.Name)
	}

	if entry.IsDir {
		t.Errorf("–§–∞–π–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∫–∞—Ç–∞–ª–æ–≥")
	}

	if string(entry.Content) != testContent {
		t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç:\n–û–∂–∏–¥–∞–ª–æ—Å—å: %s\n–ü–æ–ª—É—á–∏–ª–∏: %s",
			testContent, string(entry.Content))
	}

	if entry.Size != int64(len(testContent)) {
		t.Errorf("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è %d, –ø–æ–ª—É—á–∏–ª–∏ %d",
			len(testContent), entry.Size)
	}
}

func TestAddFileToVaultUpdateExisting(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"
	testFilePath := filepath.Join(tmpDir, "test_file.txt")

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err = CreateVault(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞
	content1 := "–ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞"
	err = os.WriteFile(testFilePath, []byte(content1), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = AddFileToVault(vaultPath, password, testFilePath)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–Ω–æ–≤–∞
	time.Sleep(100 * time.Millisecond) // –ß—Ç–æ–±—ã –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ª–∏—á–∞–ª–æ—Å—å
	content2 := "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞"
	err = os.WriteFile(testFilePath, []byte(content2), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %v", err)
	}

	err = AddFileToVault(vaultPath, password, testFilePath)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
	data, err := loadVaultData(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	if len(data.Entries) != 1 {
		t.Fatalf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 –∑–∞–ø–∏—Å—å, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	entry := data.Entries[0]
	if string(entry.Content) != content2 {
		t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å:\n–û–∂–∏–¥–∞–ª–æ—Å—å: %s\n–ü–æ–ª—É—á–∏–ª–∏: %s",
			content2, string(entry.Content))
	}
}

func TestAddDirectoryToVault(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err = CreateVault(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
	testDir := filepath.Join(tmpDir, "test_directory")
	subDir := filepath.Join(testDir, "subdir")
	err = os.MkdirAll(subDir, 0755)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
	file1 := filepath.Join(testDir, "file1.txt")
	file2 := filepath.Join(subDir, "file2.txt")

	err = os.WriteFile(file1, []byte("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 1"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª 1: %v", err)
	}

	err = os.WriteFile(file2, []byte("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 2"), 0644)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª 2: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err = AddDirectoryToVault(vaultPath, password, testDir)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	data, err := loadVaultData(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∑–∞–ø–∏—Å–∏: –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥, –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –∏ 2 —Ñ–∞–π–ª–∞
	expectedEntries := 4
	if len(data.Entries) != expectedEntries {
		t.Fatalf("–û–∂–∏–¥–∞–ª–æ—Å—å %d –∑–∞–ø–∏—Å–µ–π, –ø–æ–ª—É—á–∏–ª–∏ %d", expectedEntries, len(data.Entries))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—É—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
	expectedPaths := map[string]bool{
		"test_directory":                  true,
		"test_directory/subdir":           true,
		"test_directory/file1.txt":        true,
		"test_directory/subdir/file2.txt": true,
	}

	for _, entry := range data.Entries {
		if !expectedPaths[entry.Path] {
			t.Errorf("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %s", entry.Path)
		}
		delete(expectedPaths, entry.Path)
	}

	if len(expectedPaths) > 0 {
		t.Errorf("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—É—Ç–∏: %v", expectedPaths)
	}
}

func TestExtractVault(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"
	extractDir := filepath.Join(tmpDir, "extracted")

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	testData := VaultData{
		Entries: []VaultEntry{
			{
				Path:    "test_dir",
				Name:    "test_dir",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
			{
				Path:    "test_dir/file.txt",
				Name:    "file.txt",
				IsDir:   false,
				Size:    13,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("test content!"),
			},
			{
				Path:    "root_file.txt",
				Name:    "root_file.txt",
				IsDir:   false,
				Size:    10,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("root file!"),
			},
		},
		CreatedAt: time.Now(),
		Comment:   "Test vault",
	}

	err = saveVaultData(vaultPath, password, testData)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: %v", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
	err = ExtractVault(vaultPath, password, extractDir)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª—ã: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	extractedFile1 := filepath.Join(extractDir, "test_dir/file.txt")
	extractedFile2 := filepath.Join(extractDir, "root_file.txt")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω
	if info, err := os.Stat(filepath.Join(extractDir, "test_dir")); err != nil || !info.IsDir() {
		t.Errorf("–ö–∞—Ç–∞–ª–æ–≥ test_dir –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
	content1, err := os.ReadFile(extractedFile1)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª 1: %v", err)
	}
	if string(content1) != "test content!" {
		t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 1 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å 'test content!', –ø–æ–ª—É—á–∏–ª–∏ '%s'", string(content1))
	}

	content2, err := os.ReadFile(extractedFile2)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª 2: %v", err)
	}
	if string(content2) != "root file!" {
		t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ 2 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å 'root file!', –ø–æ–ª—É—á–∏–ª–∏ '%s'", string(content2))
	}
}

func TestExtractSpecific(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	testData := VaultData{
		Entries: []VaultEntry{
			{
				Path:    "dir1",
				Name:    "dir1",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
			{
				Path:    "dir1/file1.txt",
				Name:    "file1.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("file1!!!"),
			},
			{
				Path:    "dir2",
				Name:    "dir2",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
			{
				Path:    "dir2/file2.txt",
				Name:    "file2.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("file2!!!"),
			},
			{
				Path:    "single_file.txt",
				Name:    "single_file.txt",
				IsDir:   false,
				Size:    11,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("single file"),
			},
		},
		CreatedAt: time.Now(),
		Comment:   "Test vault",
	}

	err = saveVaultData(vaultPath, password, testData)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: %v", err)
	}

	t.Run("ExtractSingleFile", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_single")

		err = ExtractSpecific(vaultPath, password, "single_file.txt", extractDir)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª: %v", err)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–∑–≤–ª–µ—á–µ–Ω
		extractedFile := filepath.Join(extractDir, "single_file.txt")
		content, err := os.ReadFile(extractedFile)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
		}

		if string(content) != "single file" {
			t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å 'single file', –ø–æ–ª—É—á–∏–ª–∏ '%s'", string(content))
		}
	})

	t.Run("ExtractDirectory", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_dir")

		err = ExtractSpecific(vaultPath, password, "dir1", extractDir)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞—Ç–∞–ª–æ–≥: %v", err)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑–≤–ª–µ—á–µ–Ω
		extractedFile := filepath.Join(extractDir, "file1.txt")
		content, err := os.ReadFile(extractedFile)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: %v", err)
		}

		if string(content) != "file1!!!" {
			t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å 'file1!!!', –ø–æ–ª—É—á–∏–ª–∏ '%s'", string(content))
		}
	})

	t.Run("ExtractNonExistent", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_nonexistent")

		err = ExtractSpecific(vaultPath, password, "nonexistent_file.txt", extractDir)
		if err == nil {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
		}

		expectedError := "—Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ 'nonexistent_file.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
		if err.Error() != expectedError {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ '%s', –ø–æ–ª—É—á–∏–ª–∏ '%s'", expectedError, err.Error())
		}
	})
}

func TestRemoveFromVault(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	testData := VaultData{
		Entries: []VaultEntry{
			{
				Path:    "dir1",
				Name:    "dir1",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
			{
				Path:    "dir1/file1.txt",
				Name:    "file1.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("content1"),
			},
			{
				Path:    "dir1/file2.txt",
				Name:    "file2.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("content2"),
			},
			{
				Path:    "standalone_file.txt",
				Name:    "standalone_file.txt",
				IsDir:   false,
				Size:    10,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("standalone"),
			},
		},
		CreatedAt: time.Now(),
		Comment:   "Test vault",
	}

	err = saveVaultData(vaultPath, password, testData)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: %v", err)
	}

	t.Run("RemoveFile", func(t *testing.T) {
		err = RemoveFromVault(vaultPath, password, "standalone_file.txt")
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: %v", err)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
		data, err := loadVaultData(vaultPath, password)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
		}

		for _, entry := range data.Entries {
			if entry.Path == "standalone_file.txt" {
				t.Errorf("–§–∞–π–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å
		if len(data.Entries) != 3 {
			t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 3 –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
		}
	})

	t.Run("RemoveDirectory", func(t *testing.T) {
		err = RemoveFromVault(vaultPath, password, "dir1")
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥: %v", err)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—Å–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–æ
		data, err := loadVaultData(vaultPath, password)
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
		}

		for _, entry := range data.Entries {
			if entry.Path == "dir1" || entry.Path == "dir1/file1.txt" || entry.Path == "dir1/file2.txt" {
				t.Errorf("–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω: %s", entry.Path)
			}
		}

		// –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 0 –∑–∞–ø–∏—Å–µ–π
		if len(data.Entries) != 0 {
			t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 0 –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
		}
	})

	t.Run("RemoveNonExistent", func(t *testing.T) {
		err = RemoveFromVault(vaultPath, password, "nonexistent_file.txt")
		if err == nil {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
		}

		expectedError := "—Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ 'nonexistent_file.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
		if err.Error() != expectedError {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ '%s', –ø–æ–ª—É—á–∏–ª–∏ '%s'", expectedError, err.Error())
		}
	})
}

func TestGetFileFromVault(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	testContent := "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ üìÅ"
	testData := VaultData{
		Entries: []VaultEntry{
			{
				Path:    "test_file.txt",
				Name:    "test_file.txt",
				IsDir:   false,
				Size:    int64(len(testContent)),
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte(testContent),
			},
			{
				Path:    "test_dir",
				Name:    "test_dir",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
		},
		CreatedAt: time.Now(),
		Comment:   "Test vault",
	}

	err = saveVaultData(vaultPath, password, testData)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: %v", err)
	}

	t.Run("GetExistingFile", func(t *testing.T) {
		content, err := GetFileFromVault(vaultPath, password, "test_file.txt")
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: %v", err)
		}

		if string(content) != testContent {
			t.Errorf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç:\n–û–∂–∏–¥–∞–ª–æ—Å—å: %s\n–ü–æ–ª—É—á–∏–ª–∏: %s",
				testContent, string(content))
		}
	})

	t.Run("GetNonExistentFile", func(t *testing.T) {
		_, err := GetFileFromVault(vaultPath, password, "nonexistent.txt")
		if err == nil {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª")
		}

		expectedError := "—Ñ–∞–π–ª 'nonexistent.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
		if err.Error() != expectedError {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ '%s', –ø–æ–ª—É—á–∏–ª–∏ '%s'", expectedError, err.Error())
		}
	})

	t.Run("GetDirectory", func(t *testing.T) {
		_, err := GetFileFromVault(vaultPath, password, "test_dir")
		if err == nil {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∫ —Ñ–∞–π–ª")
		}

		expectedError := "—Ñ–∞–π–ª 'test_dir' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
		if err.Error() != expectedError {
			t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ '%s', –ø–æ–ª—É—á–∏–ª–∏ '%s'", expectedError, err.Error())
		}
	})
}

func TestCompressDecompressData(t *testing.T) {
	testCases := []struct {
		name string
		data []byte
	}{
		{
			name: "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
			data: []byte("Hello, world!"),
		},
		{
			name: "–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ",
			data: []byte(""),
		},
		{
			name: "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç",
			data: []byte("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç"),
		},
		{
			name: "–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ",
			data: bytes.Repeat([]byte("Test data "), 1000),
		},
		{
			name: "–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
			data: []byte{0x00, 0x01, 0x02, 0x03, 0xFF, 0xFE, 0xFD},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
			compressed, err := compressData(tc.data)
			if err != nil {
				t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: %v", err)
			}

			// –†–∞–∑–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
			decompressed, err := decompressData(compressed)
			if err != nil {
				t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: %v", err)
			}

			// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			if !bytes.Equal(tc.data, decompressed) {
				t.Errorf("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è/—Ä–∞–∑–∂–∞—Ç–∏—è:\n–û—Ä–∏–≥–∏–Ω–∞–ª: %v\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %v",
					tc.data, decompressed)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∂–∞—Ç–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
			if len(tc.data) > 100 && len(compressed) >= len(tc.data) {
				t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–∂–∞—Ç–∏–µ –Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–±—ã–ª–æ: %d, —Å—Ç–∞–ª–æ: %d)",
					len(tc.data), len(compressed))
			}
		})
	}
}

func TestInvalidCompressedData(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–∂–∞—Ç–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	invalidData := []byte("invalid compressed data")

	_, err := decompressData(invalidData)
	if err == nil {
		t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∂–∞—Ç–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
	}
}

func TestListVault(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	err = CreateVault(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	data, err := ListVault(vaultPath, password)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: %v", err)
	}

	if len(data.Entries) != 0 {
		t.Errorf("–ü—É—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 0 –∑–∞–ø–∏—Å–µ–π, –ø–æ–ª—É—á–∏–ª–∏ %d", len(data.Entries))
	}

	if data.Comment != "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Flint Vault" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s", data.Comment)
	}
}

// Benchmark —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func BenchmarkCreateVault(b *testing.B) {
	tmpDir, err := os.MkdirTemp("", "vault_bench_*")
	if err != nil {
		b.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	password := "BenchmarkPassword123!"

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		vaultPath := filepath.Join(tmpDir, fmt.Sprintf("bench_%d.dat", i))
		err := CreateVault(vaultPath, password)
		if err != nil {
			b.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: %v", err)
		}
	}
}

func BenchmarkCompressDecompress(b *testing.B) {
	data := bytes.Repeat([]byte("Test data for compression benchmark "), 100)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		compressed, err := compressData(data)
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: %v", err)
		}

		_, err = decompressData(compressed)
		if err != nil {
			b.Fatalf("–û—à–∏–±–∫–∞ —Ä–∞–∑–∂–∞—Ç–∏—è: %v", err)
		}
	}
}

// TestExtractMultiple —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
func TestExtractMultiple(t *testing.T) {
	tmpDir, err := os.MkdirTemp("", "vault_test_*")
	if err != nil {
		t.Fatalf("Failed to create temp directory: %v", err)
	}
	defer os.RemoveAll(tmpDir)

	vaultPath := filepath.Join(tmpDir, "test.dat")
	password := "password123"

	// Create test vault with multiple files and directories
	testData := VaultData{
		Entries: []VaultEntry{
			{
				Path:    "dir1",
				Name:    "dir1",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
			{
				Path:    "dir1/file1.txt",
				Name:    "file1.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("file1!!!"),
			},
			{
				Path:    "dir1/file2.txt",
				Name:    "file2.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("file2!!!"),
			},
			{
				Path:    "dir2",
				Name:    "dir2",
				IsDir:   true,
				Size:    0,
				Mode:    0755,
				ModTime: time.Now(),
				Content: nil,
			},
			{
				Path:    "dir2/file3.txt",
				Name:    "file3.txt",
				IsDir:   false,
				Size:    8,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("file3!!!"),
			},
			{
				Path:    "single_file.txt",
				Name:    "single_file.txt",
				IsDir:   false,
				Size:    11,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("single file"),
			},
			{
				Path:    "another_file.txt",
				Name:    "another_file.txt",
				IsDir:   false,
				Size:    12,
				Mode:    0644,
				ModTime: time.Now(),
				Content: []byte("another file"),
			},
		},
		CreatedAt: time.Now(),
		Comment:   "Test vault for multiple extraction",
	}

	err = saveVaultData(vaultPath, password, testData)
	if err != nil {
		t.Fatalf("Failed to save test data: %v", err)
	}

	t.Run("ExtractMultipleFiles", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_multiple_files")
		targetPaths := []string{"single_file.txt", "another_file.txt"}

		extractedPaths, notFoundPaths, err := ExtractMultiple(vaultPath, password, targetPaths, extractDir)
		if err != nil {
			t.Fatalf("Failed to extract multiple files: %v", err)
		}

		// Check results
		if len(extractedPaths) != 2 {
			t.Errorf("Expected 2 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 0 {
			t.Errorf("Expected 0 not found paths, got %d", len(notFoundPaths))
		}

		// Check extracted files
		file1 := filepath.Join(extractDir, "single_file.txt")
		content1, err := os.ReadFile(file1)
		if err != nil {
			t.Fatalf("Failed to read extracted file1: %v", err)
		}
		if string(content1) != "single file" {
			t.Errorf("File1 content mismatch: expected 'single file', got '%s'", string(content1))
		}

		file2 := filepath.Join(extractDir, "another_file.txt")
		content2, err := os.ReadFile(file2)
		if err != nil {
			t.Fatalf("Failed to read extracted file2: %v", err)
		}
		if string(content2) != "another file" {
			t.Errorf("File2 content mismatch: expected 'another file', got '%s'", string(content2))
		}
	})

	t.Run("ExtractMultipleDirectories", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_multiple_dirs")
		targetPaths := []string{"dir1", "dir2"}

		extractedPaths, notFoundPaths, err := ExtractMultiple(vaultPath, password, targetPaths, extractDir)
		if err != nil {
			t.Fatalf("Failed to extract multiple directories: %v", err)
		}

		// Check results
		if len(extractedPaths) != 2 {
			t.Errorf("Expected 2 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 0 {
			t.Errorf("Expected 0 not found paths, got %d", len(notFoundPaths))
		}

		// Check extracted directories and files
		dir1File1 := filepath.Join(extractDir, "file1.txt")
		content1, err := os.ReadFile(dir1File1)
		if err != nil {
			t.Fatalf("Failed to read dir1/file1.txt: %v", err)
		}
		if string(content1) != "file1!!!" {
			t.Errorf("Dir1/file1 content mismatch: expected 'file1!!!', got '%s'", string(content1))
		}

		dir2File3 := filepath.Join(extractDir, "file3.txt")
		content3, err := os.ReadFile(dir2File3)
		if err != nil {
			t.Fatalf("Failed to read dir2/file3.txt: %v", err)
		}
		if string(content3) != "file3!!!" {
			t.Errorf("Dir2/file3 content mismatch: expected 'file3!!!', got '%s'", string(content3))
		}
	})

	t.Run("ExtractMixed", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_mixed")
		targetPaths := []string{"dir1", "single_file.txt", "another_file.txt"}

		extractedPaths, notFoundPaths, err := ExtractMultiple(vaultPath, password, targetPaths, extractDir)
		if err != nil {
			t.Fatalf("Failed to extract mixed targets: %v", err)
		}

		// Check results
		if len(extractedPaths) != 3 {
			t.Errorf("Expected 3 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 0 {
			t.Errorf("Expected 0 not found paths, got %d", len(notFoundPaths))
		}

		// Check directory content
		dir1File1 := filepath.Join(extractDir, "file1.txt")
		if _, err := os.Stat(dir1File1); os.IsNotExist(err) {
			t.Errorf("Dir1/file1.txt was not extracted")
		}

		// Check individual files
		singleFile := filepath.Join(extractDir, "single_file.txt")
		if _, err := os.Stat(singleFile); os.IsNotExist(err) {
			t.Errorf("single_file.txt was not extracted")
		}

		anotherFile := filepath.Join(extractDir, "another_file.txt")
		if _, err := os.Stat(anotherFile); os.IsNotExist(err) {
			t.Errorf("another_file.txt was not extracted")
		}
	})

	t.Run("ExtractWithNotFound", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_with_not_found")
		targetPaths := []string{"single_file.txt", "nonexistent.txt", "dir1", "nonexistent_dir"}

		extractedPaths, notFoundPaths, err := ExtractMultiple(vaultPath, password, targetPaths, extractDir)
		if err != nil {
			t.Fatalf("Failed to extract with not found items: %v", err)
		}

		// Check results
		if len(extractedPaths) != 2 {
			t.Errorf("Expected 2 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 2 {
			t.Errorf("Expected 2 not found paths, got %d", len(notFoundPaths))
		}

		// Check that existing items were extracted
		singleFile := filepath.Join(extractDir, "single_file.txt")
		if _, err := os.Stat(singleFile); os.IsNotExist(err) {
			t.Errorf("single_file.txt was not extracted")
		}

		dir1File1 := filepath.Join(extractDir, "file1.txt")
		if _, err := os.Stat(dir1File1); os.IsNotExist(err) {
			t.Errorf("dir1/file1.txt was not extracted")
		}
	})

	t.Run("ExtractEmptyTargets", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_empty")
		targetPaths := []string{}

		_, _, err := ExtractMultiple(vaultPath, password, targetPaths, extractDir)
		if err == nil {
			t.Errorf("Expected error for empty target paths")
		}
		if !strings.Contains(err.Error(), "no target paths specified") {
			t.Errorf("Expected 'no target paths specified' error, got: %v", err)
		}
	})

	t.Run("ExtractAllNotFound", func(t *testing.T) {
		extractDir := filepath.Join(tmpDir, "extract_all_not_found")
		targetPaths := []string{"nonexistent1.txt", "nonexistent2.txt"}

		extractedPaths, notFoundPaths, err := ExtractMultiple(vaultPath, password, targetPaths, extractDir)
		if err == nil {
			t.Errorf("Expected error when all targets not found")
		}
		if !strings.Contains(err.Error(), "none of the specified files or directories were found") {
			t.Errorf("Expected 'none found' error, got: %v", err)
		}

		if len(extractedPaths) != 0 {
			t.Errorf("Expected 0 extracted paths, got %d", len(extractedPaths))
		}
		if len(notFoundPaths) != 2 {
			t.Errorf("Expected 2 not found paths, got %d", len(notFoundPaths))
		}
	})
}
